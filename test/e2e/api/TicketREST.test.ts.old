import * as request from 'supertest';
import { bootstrapApp, BootstrapSettings } from '../utils/bootstrap';
import { OperatorRepository } from '../../../src/api/repositories/OperatorRepository';
import { Operator } from '../../../src/api/models/Operator';
import { Ticket } from '../../../src/api/models/Ticket';


describe('/api Ticket REST ', () => {

    // -------------------------------------------------------------------------
    // Setup up
    // -------------------------------------------------------------------------
    let bruce: Operator | undefined;
    let repos: OperatorRepository;
    let settings: BootstrapSettings;
    let newTicket = new Ticket();
    let data: string;
    beforeAll(async () => settings = await bootstrapApp());
    beforeAll(async () => repos = await settings.connection.getCustomRepository(OperatorRepository));
    beforeAll(async () => bruce = await repos.findOneById(1));
    beforeAll(() => {
        newTicket.id_service = 1;
        newTicket.id_operator = 1;
        newTicket.id_status = 1;
        newTicket.id_category = 1;
        data = 'id_service=1&id_operator=1&id_status=1&id_category=1';
    });

    // -------------------------------------------------------------------------
    //     Test cases
    // -------------------------------------------------------------------------
    test('POST: /login with username and password should return an Bruce Operator object', async (done) => {

        if (!bruce) { bruce = new Operator(); }
        const response = await request(settings.app)
            .post(`/api/login?username=${bruce.login}&password=${bruce.pwd}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body.id).toBe(bruce.id);
        expect(response.body.firstname).toBe(bruce.firstname);
        expect(response.body.lastname).toBe(bruce.lastname);
        done();
    });

    test('POST: /ticket CREATE of CRUD Ticket for User Bruce', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .post(`/api/ticket?` + data)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body.id).toBeDefined();
        newTicket = response.body;
        done();
    });

    test('PUT: /ticket UPDATE of CRUD Ticket for User Bruce', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        data = 'id_category=2&phone=5555555555';
        const response = await request(settings.app)
            .put('/api/ticket' + '/' + newTicket.id + '?' + data)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body.id).toBeDefined();
        expect(response.body.id_category).toBe('2');
        expect(response.body.phone).toBe('5555555555');
        done();
    });

    test('GET: /ticket READ of CRUD for All Ticket that User Bruce', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .get('/api/ticket')
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body).toBeDefined();
        done();
    });

    test('GET: /ticket READ of CRUD for All Ticket from category that User Bruce', async (done) => {

        const categoryData = 'id_category=2';
        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .get('/api/ticket?' + categoryData)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body[0].id_category).toBe(2);
        done();
    });


    test('GET: /ticket READ of CRUD for one Ticket id for User Bruce', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .get('/api/ticket' + '/' + newTicket.id)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body.id).toBe(newTicket.id);
        done();
    });

    test('DELETE: /ticket DELETE of CRUD Ticket for User Bruce', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .delete('/api/ticket' + '/' + newTicket.id)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body.deleted).toBe(1);
        done();
    });

    test('GET: /logout with valid token should return no error', async (done) => {

        let bruceOut = await repos.findOneById(1);
        if (!bruceOut) { bruceOut = new Operator(); }
        const response = await request(settings.app)
            .get(`/api/logout`)
            .set('Authorization', `Bearer ${bruceOut.token.token_session}`)
            .expect('Content-Type', /json/)
            .expect(200);

        expect(response.body).toBe(true);
        done();
    });



});

